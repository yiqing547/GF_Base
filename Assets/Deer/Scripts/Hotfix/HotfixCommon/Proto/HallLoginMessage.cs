// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: HallLoginMessage.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from HallLoginMessage.proto</summary>
public static partial class HallLoginMessageReflection {

  #region Descriptor
  /// <summary>File descriptor for HallLoginMessage.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static HallLoginMessageReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChZIYWxsTG9naW5NZXNzYWdlLnByb3RvIsQDCgxMb2dpblJlcXVlc3QSEQoJ",
          "c2Vzc2lvbklEGAEgASgDEg4KBmdhdGVJZBgCIAEoBRIKCgJpcBgDIAEoCRIW",
          "Cg5pc05lZWRPdmVybG9hZBgEIAEoCBIRCglpc05ld1VzZXIYFCABKAgSDwoH",
          "YWNjb3VudBgFIAEoCRIQCghwYXNzd29yZBgGIAEoCRIdCglsb2dpblR5cGUY",
          "ByABKA4yCi5Mb2dpblR5cGUSDwoHdmVyc2lvbhgIIAEoCRITCgtpc01hbmRh",
          "dG9yeRgJIAEoCBIKCgJwdBgKIAEoBRIMCgR1ZGlkGAsgASgJEg4KBm9zSW5m",
          "bxgMIAEoCRISCgpkZXZpY2VUeXBlGA0gASgJEhMKC2RldmljZU1vZGVsGA4g",
          "ASgJEhkKEXJlZ2lzdHJhdGlvblRva2VuGA8gASgJEhAKCHNlbmRUaW1lGBEg",
          "ASgDEhYKDmlzUmVjb25uZWN0aW9uGBIgASgIEg4KBmNlbGxJZBgTIAEoBRIP",
          "CgdjaGFubmVsGBUgASgJEhEKCW9zVmVyc2lvbhgWIAEoCRISCgpvcHBWZXJz",
          "aW9uGBcgASgJEhIKCmRpc3RpbmN0SWQYGCABKAki6QEKDUxvZ2luUmVzcG9u",
          "c2USEQoJc2Vzc2lvbklEGAEgASgDEhAKCGlzQ3JlYXRlGAIgASgIEiMKCmxv",
          "Z2luRXJyb3IYAyABKA4yDy5Mb2dpbkVycm9yQ29kZRILCgN1aWQYBCABKAMS",
          "EgoKb25saW5lVGltZRgFIAEoBRIPCgdhY2NvdW50GAYgASgJEhEKCWFjY291",
          "bnRJZBgHIAEoAxIQCghwYXNzd29yZBgIIAEoCRISCgppc1JlYWxOYW1lGAkg",
          "ASgIEgsKA2FnZRgKIAEoBRIWCg5pc1JlY29ubmVjdGlvbhgLIAEoCCI3ChBL",
          "aWxsVXNlclJlc3BvbnNlEiMKDGtpbGxVc2VyVHlwZRgBIAEoDjINLktpbGxV",
          "c2VyVHlwZSIjChNNZXNzYWdlU2VlZFJlc3BvbnNlEgwKBHNlZWQYASABKA0i",
          "OgoTTG9naW5GaW5pc2hSZXNwb25zZRISCgpmaW5pc2hUaW1lGAEgASgDEg8K",
          "B3JlTG9naW4YAiABKAgiVQoPVmVyaWZpZWRSZXF1ZXN0EgwKBG5hbWUYASAB",
          "KAkSFgoOaWRlbnRpZmljYXRpb24YAiABKAkSCwoDYWdlGAMgASgFEg8KB2Fj",
          "Y291bnQYBCABKAkihQEKEFZlcmlmaWVkUmVzcG9uc2USHQoGcmVzdWx0GAEg",
          "ASgOMg0uVmVyaWZpZWRUeXBlEhIKCm9ubGluZVRpbWUYAiABKAUSEgoKaXNS",
          "ZWFsTmFtZRgDIAEoCBILCgNhZ2UYBCABKAUSHQoVdW5kZXJhZ2VSZW1haW5p",
          "bmdUaW1lGAUgASgFIjEKDEhlYXJ0UmVxdWVzdBIOCgZ1c2VySWQYASABKAMS",
          "EQoJc2Vzc2lvbklEGAIgASgDIk4KDUhlYXJ0UmVzcG9uc2USEgoKc2VydmVy",
          "VGltZRgBIAEoAxISCgpvbmxpbmVUaW1lGAIgASgFEhUKDXNlc3Npb25UaWNr",
          "ZXQYAyABKAkijQIKElRpY2tldExvZ2luUmVxRGF0YRISCgpzZXNzaW9uSURf",
          "GAEgASgDEg4KBmdhdGVJZBgCIAEoBRIKCgJpcBgDIAEoCRIPCgdjZWxsSWRf",
          "GAQgASgFEhQKDGZvcmNlS2lja291dBgFIAEoCBIQCghwbGF0Zm9ybRgGIAEo",
          "BRIQCghkZXZpY2VJZBgHIAEoCRIOCgZvc0luZm8YCCABKAkSEgoKZGV2aWNl",
          "VHlwZRgJIAEoCRITCgtkZXZpY2VNb2RlbBgKIAEoCRIZChFyZWdpc3RyYXRp",
          "b25Ub2tlbhgLIAEoCRIQCghzZW5kVGltZRgMIAEoAxIWCg5pc1JlY29ubmVj",
          "dGlvbhgNIAEoCCJSChRUaWNrZXRMb2dpbkV4UmVxdWVzdBIOCgZ0aWNrZXQY",
          "ASABKAkSKgoNZW5jcnlwdGVkRGF0YRgCIAEoCzITLlRpY2tldExvZ2luUmVx",
          "RGF0YSJSChZUaWNrZXRSZUxvZ2luRXhSZXF1ZXN0EhUKDXNlc3Npb25UaWNr",
          "ZXQYASABKAkSIQoEZGF0YRgCIAEoCzITLlRpY2tldExvZ2luUmVxRGF0YSJ5",
          "ChpUaWNrZXRMb2dpbkludGVybmFsUmVxdWVzdBIRCglhY2NvdW50SWQYASAB",
          "KAMSDwoHYWNjb3VudBgCIAEoCRIUCgxuZWVkT3ZlcmxvYWQYAyABKAgSIQoE",
          "ZGF0YRgEIAEoCzITLlRpY2tldExvZ2luUmVxRGF0YSIPCg1Mb2dvdXRSZXF1",
          "ZXN0IhAKDkxvZ291dFJlc3BvbnNlItwDChRMb2dpbkludGVybmFsUmVxdWVz",
          "dBIRCglzZXNzaW9uSUQYASABKAMSDgoGZ2F0ZUlkGAIgASgFEgoKAmlwGAMg",
          "ASgJEhYKDmlzTmVlZE92ZXJsb2FkGAQgASgIEg4KBnVzZXJJZBgTIAEoAxIO",
          "CgZjZWxsSWQYFCABKAUSEQoJaXNOZXdVc2VyGBUgASgIEg8KB2FjY291bnQY",
          "BSABKAkSEAoIcGFzc3dvcmQYBiABKAkSHQoJbG9naW5UeXBlGAcgASgOMgou",
          "TG9naW5UeXBlEg8KB3ZlcnNpb24YCCABKAkSEwoLaXNNYW5kYXRvcnkYCSAB",
          "KAgSCgoCcHQYCiABKAUSDAoEdWRpZBgLIAEoCRIOCgZvc0luZm8YDCABKAkS",
          "EgoKZGV2aWNlVHlwZRgNIAEoCRITCgtkZXZpY2VNb2RlbBgOIAEoCRIZChFy",
          "ZWdpc3RyYXRpb25Ub2tlbhgPIAEoCRIQCghzZW5kVGltZRgRIAEoAxIWCg5p",
          "c1JlY29ubmVjdGlvbhgSIAEoCBIPCgdjaGFubmVsGBYgASgJEhEKCW9zVmVy",
          "c2lvbhgXIAEoCRISCgpvcHBWZXJzaW9uGBggASgJEhIKCmRpc3RpbmN0SWQY",
          "GSABKAkqJwoJTG9naW5UeXBlEgsKB0FjY291bnQQABINCglGYXN0TG9naW4Q",
          "ASrjAQoOTG9naW5FcnJvckNvZGUSCwoHU3VjY2VzcxAAEhEKDVdyb25nUGFz",
          "c3dvcmQQARISCg5QYXNzd29yZExlbmd0aBACEhEKDUFjY291bnRMZW5ndGgQ",
          "AxIQCgxQYXNzd29yZENoYXIQBBIPCgtBY2NvdW50Q2hhchAFEhMKD0FjY291",
          "bnRMb2dnZWRJbhAGEgoKBkJhbm5lZBAHEgwKCE5vU2VydmVyEAgSFgoSTG9n",
          "aW5UaWNrZXRJbnZhbGlkEAkSDQoJRXhjZXB0aW9uEAoSEQoNU2VydmVySWRF",
          "cnJvchALKj0KDEtpbGxVc2VyVHlwZRIPCgtTYW1lQWNjb3VudBAAEg8KC0Ns",
          "b3NlU2VydmVyEAESCwoHS2lja291dBACKkMKDFZlcmlmaWVkVHlwZRIPCgtW",
          "ZXJpZmllZFN1YxAAEhAKDFZlcmlmaWVkTnVsbBABEhAKDFZlcmlmaWVkRmFp",
          "bBACQhoKGGNvbS50b3BnYW1lLm1lc3NhZ2UuaGFsbGIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::LoginType), typeof(global::LoginErrorCode), typeof(global::KillUserType), typeof(global::VerifiedType), }, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::LoginRequest), global::LoginRequest.Parser, new[]{ "SessionID", "GateId", "Ip", "IsNeedOverload", "IsNewUser", "Account", "Password", "LoginType", "Version", "IsMandatory", "Pt", "Udid", "OsInfo", "DeviceType", "DeviceModel", "RegistrationToken", "SendTime", "IsReconnection", "CellId", "Channel", "OsVersion", "OppVersion", "DistinctId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LoginResponse), global::LoginResponse.Parser, new[]{ "SessionID", "IsCreate", "LoginError", "Uid", "OnlineTime", "Account", "AccountId", "Password", "IsRealName", "Age", "IsReconnection" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::KillUserResponse), global::KillUserResponse.Parser, new[]{ "KillUserType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MessageSeedResponse), global::MessageSeedResponse.Parser, new[]{ "Seed" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LoginFinishResponse), global::LoginFinishResponse.Parser, new[]{ "FinishTime", "ReLogin" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VerifiedRequest), global::VerifiedRequest.Parser, new[]{ "Name", "Identification", "Age", "Account" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VerifiedResponse), global::VerifiedResponse.Parser, new[]{ "Result", "OnlineTime", "IsRealName", "Age", "UnderageRemainingTime" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HeartRequest), global::HeartRequest.Parser, new[]{ "UserId", "SessionID" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HeartResponse), global::HeartResponse.Parser, new[]{ "ServerTime", "OnlineTime", "SessionTicket" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TicketLoginReqData), global::TicketLoginReqData.Parser, new[]{ "SessionID", "GateId", "Ip", "CellId", "ForceKickout", "Platform", "DeviceId", "OsInfo", "DeviceType", "DeviceModel", "RegistrationToken", "SendTime", "IsReconnection" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TicketLoginExRequest), global::TicketLoginExRequest.Parser, new[]{ "Ticket", "EncryptedData" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TicketReLoginExRequest), global::TicketReLoginExRequest.Parser, new[]{ "SessionTicket", "Data" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TicketLoginInternalRequest), global::TicketLoginInternalRequest.Parser, new[]{ "AccountId", "Account", "NeedOverload", "Data" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LogoutRequest), global::LogoutRequest.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LogoutResponse), global::LogoutResponse.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LoginInternalRequest), global::LoginInternalRequest.Parser, new[]{ "SessionID", "GateId", "Ip", "IsNeedOverload", "UserId", "CellId", "IsNewUser", "Account", "Password", "LoginType", "Version", "IsMandatory", "Pt", "Udid", "OsInfo", "DeviceType", "DeviceModel", "RegistrationToken", "SendTime", "IsReconnection", "Channel", "OsVersion", "OppVersion", "DistinctId" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Enums
/// <summary>
/// 登录类型
/// </summary>
public enum LoginType {
  /// <summary>
  ///账号登录
  /// </summary>
  [pbr::OriginalName("Account")] Account = 0,
  /// <summary>
  ///快速登录
  /// </summary>
  [pbr::OriginalName("FastLogin")] FastLogin = 1,
}

public enum LoginErrorCode {
  /// <summary>
  ///成功
  /// </summary>
  [pbr::OriginalName("Success")] Success = 0,
  /// <summary>
  /// 密码错误
  /// </summary>
  [pbr::OriginalName("WrongPassword")] WrongPassword = 1,
  /// <summary>
  /// 密码长度错误
  /// </summary>
  [pbr::OriginalName("PasswordLength")] PasswordLength = 2,
  /// <summary>
  /// 帐号长度错误
  /// </summary>
  [pbr::OriginalName("AccountLength")] AccountLength = 3,
  /// <summary>
  /// 密码字符错误
  /// </summary>
  [pbr::OriginalName("PasswordChar")] PasswordChar = 4,
  /// <summary>
  /// 帐号字符错误
  /// </summary>
  [pbr::OriginalName("AccountChar")] AccountChar = 5,
  /// <summary>
  /// 帐号已登陆
  /// </summary>
  [pbr::OriginalName("AccountLoggedIn")] AccountLoggedIn = 6,
  /// <summary>
  /// 帐号被封
  /// </summary>
  [pbr::OriginalName("Banned")] Banned = 7,
  /// <summary>
  /// 服务器不可用
  /// </summary>
  [pbr::OriginalName("NoServer")] NoServer = 8,
  [pbr::OriginalName("LoginTicketInvalid")] LoginTicketInvalid = 9,
  /// <summary>
  /// 账号异常
  /// </summary>
  [pbr::OriginalName("Exception")] Exception = 10,
  /// <summary>
  /// 服务器ID错误
  /// </summary>
  [pbr::OriginalName("ServerIdError")] ServerIdError = 11,
}

public enum KillUserType {
  /// <summary>
  /// 顶号
  /// </summary>
  [pbr::OriginalName("SameAccount")] SameAccount = 0,
  /// <summary>
  /// 服务器关闭
  /// </summary>
  [pbr::OriginalName("CloseServer")] CloseServer = 1,
  [pbr::OriginalName("Kickout")] Kickout = 2,
}

public enum VerifiedType {
  [pbr::OriginalName("VerifiedSuc")] VerifiedSuc = 0,
  [pbr::OriginalName("VerifiedNull")] VerifiedNull = 1,
  [pbr::OriginalName("VerifiedFail")] VerifiedFail = 2,
}

#endregion

#region Messages
/// <summary>
///登录（进入游戏）
/// </summary>
public sealed partial class LoginRequest : pb::IMessage<LoginRequest> {
  private static readonly pb::MessageParser<LoginRequest> _parser = new pb::MessageParser<LoginRequest>(() => new LoginRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LoginRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::HallLoginMessageReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginRequest(LoginRequest other) : this() {
    sessionID_ = other.sessionID_;
    gateId_ = other.gateId_;
    ip_ = other.ip_;
    isNeedOverload_ = other.isNeedOverload_;
    isNewUser_ = other.isNewUser_;
    account_ = other.account_;
    password_ = other.password_;
    loginType_ = other.loginType_;
    version_ = other.version_;
    isMandatory_ = other.isMandatory_;
    pt_ = other.pt_;
    udid_ = other.udid_;
    osInfo_ = other.osInfo_;
    deviceType_ = other.deviceType_;
    deviceModel_ = other.deviceModel_;
    registrationToken_ = other.registrationToken_;
    sendTime_ = other.sendTime_;
    isReconnection_ = other.isReconnection_;
    cellId_ = other.cellId_;
    channel_ = other.channel_;
    osVersion_ = other.osVersion_;
    oppVersion_ = other.oppVersion_;
    distinctId_ = other.distinctId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginRequest Clone() {
    return new LoginRequest(this);
  }

  /// <summary>Field number for the "sessionID" field.</summary>
  public const int SessionIDFieldNumber = 1;
  private long sessionID_;
  /// <summary>
  /// 会话ID（服务器内部使用）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SessionID {
    get { return sessionID_; }
    set {
      sessionID_ = value;
    }
  }

  /// <summary>Field number for the "gateId" field.</summary>
  public const int GateIdFieldNumber = 2;
  private int gateId_;
  /// <summary>
  /// 网关ID（服务器内部使用）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GateId {
    get { return gateId_; }
    set {
      gateId_ = value;
    }
  }

  /// <summary>Field number for the "ip" field.</summary>
  public const int IpFieldNumber = 3;
  private string ip_ = "";
  /// <summary>
  /// IP地址（服务器内部使用）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Ip {
    get { return ip_; }
    set {
      ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "isNeedOverload" field.</summary>
  public const int IsNeedOverloadFieldNumber = 4;
  private bool isNeedOverload_;
  /// <summary>
  ///（服务器内部使用） 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsNeedOverload {
    get { return isNeedOverload_; }
    set {
      isNeedOverload_ = value;
    }
  }

  /// <summary>Field number for the "isNewUser" field.</summary>
  public const int IsNewUserFieldNumber = 20;
  private bool isNewUser_;
  /// <summary>
  ///（服务器内部使用）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsNewUser {
    get { return isNewUser_; }
    set {
      isNewUser_ = value;
    }
  }

  /// <summary>Field number for the "account" field.</summary>
  public const int AccountFieldNumber = 5;
  private string account_ = "";
  /// <summary>
  /// 账号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Account {
    get { return account_; }
    set {
      account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "password" field.</summary>
  public const int PasswordFieldNumber = 6;
  private string password_ = "";
  /// <summary>
  /// 密码
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Password {
    get { return password_; }
    set {
      password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "loginType" field.</summary>
  public const int LoginTypeFieldNumber = 7;
  private global::LoginType loginType_ = global::LoginType.Account;
  /// <summary>
  /// 登录类型 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LoginType LoginType {
    get { return loginType_; }
    set {
      loginType_ = value;
    }
  }

  /// <summary>Field number for the "version" field.</summary>
  public const int VersionFieldNumber = 8;
  private string version_ = "";
  /// <summary>
  /// 版本号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Version {
    get { return version_; }
    set {
      version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "isMandatory" field.</summary>
  public const int IsMandatoryFieldNumber = 9;
  private bool isMandatory_;
  /// <summary>
  /// 是否强制登陆
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsMandatory {
    get { return isMandatory_; }
    set {
      isMandatory_ = value;
    }
  }

  /// <summary>Field number for the "pt" field.</summary>
  public const int PtFieldNumber = 10;
  private int pt_;
  /// <summary>
  /// 枚举，平台类型：1-> iOS，2-> android，3-> 其他]
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pt {
    get { return pt_; }
    set {
      pt_ = value;
    }
  }

  /// <summary>Field number for the "udid" field.</summary>
  public const int UdidFieldNumber = 11;
  private string udid_ = "";
  /// <summary>
  /// 设备唯一标识 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Udid {
    get { return udid_; }
    set {
      udid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "osInfo" field.</summary>
  public const int OsInfoFieldNumber = 12;
  private string osInfo_ = "";
  /// <summary>
  /// 操作系统信息，ios 11.0.1等]
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string OsInfo {
    get { return osInfo_; }
    set {
      osInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "deviceType" field.</summary>
  public const int DeviceTypeFieldNumber = 13;
  private string deviceType_ = "";
  /// <summary>
  /// 设备类型ipad， iPhone、HUAWEI、小米、OPPO、VIVO等
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceType {
    get { return deviceType_; }
    set {
      deviceType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "deviceModel" field.</summary>
  public const int DeviceModelFieldNumber = 14;
  private string deviceModel_ = "";
  /// <summary>
  /// 设备型号iPhone6s，ipad mini2，oppoR9，vivo x7等等	
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceModel {
    get { return deviceModel_; }
    set {
      deviceModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "registrationToken" field.</summary>
  public const int RegistrationTokenFieldNumber = 15;
  private string registrationToken_ = "";
  /// <summary>
  /// 设备的注册令	
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RegistrationToken {
    get { return registrationToken_; }
    set {
      registrationToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "sendTime" field.</summary>
  public const int SendTimeFieldNumber = 17;
  private long sendTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SendTime {
    get { return sendTime_; }
    set {
      sendTime_ = value;
    }
  }

  /// <summary>Field number for the "isReconnection" field.</summary>
  public const int IsReconnectionFieldNumber = 18;
  private bool isReconnection_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsReconnection {
    get { return isReconnection_; }
    set {
      isReconnection_ = value;
    }
  }

  /// <summary>Field number for the "cellId" field.</summary>
  public const int CellIdFieldNumber = 19;
  private int cellId_;
  /// <summary>
  /// 服务器区服Id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CellId {
    get { return cellId_; }
    set {
      cellId_ = value;
    }
  }

  /// <summary>Field number for the "channel" field.</summary>
  public const int ChannelFieldNumber = 21;
  private string channel_ = "";
  /// <summary>
  /// 来源渠道
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Channel {
    get { return channel_; }
    set {
      channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "osVersion" field.</summary>
  public const int OsVersionFieldNumber = 22;
  private string osVersion_ = "";
  /// <summary>
  /// 操作系统版本
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string OsVersion {
    get { return osVersion_; }
    set {
      osVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "oppVersion" field.</summary>
  public const int OppVersionFieldNumber = 23;
  private string oppVersion_ = "";
  /// <summary>
  /// app版本号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string OppVersion {
    get { return oppVersion_; }
    set {
      oppVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "distinctId" field.</summary>
  public const int DistinctIdFieldNumber = 24;
  private string distinctId_ = "";
  /// <summary>
  /// 访客id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DistinctId {
    get { return distinctId_; }
    set {
      distinctId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LoginRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LoginRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionID != other.SessionID) return false;
    if (GateId != other.GateId) return false;
    if (Ip != other.Ip) return false;
    if (IsNeedOverload != other.IsNeedOverload) return false;
    if (IsNewUser != other.IsNewUser) return false;
    if (Account != other.Account) return false;
    if (Password != other.Password) return false;
    if (LoginType != other.LoginType) return false;
    if (Version != other.Version) return false;
    if (IsMandatory != other.IsMandatory) return false;
    if (Pt != other.Pt) return false;
    if (Udid != other.Udid) return false;
    if (OsInfo != other.OsInfo) return false;
    if (DeviceType != other.DeviceType) return false;
    if (DeviceModel != other.DeviceModel) return false;
    if (RegistrationToken != other.RegistrationToken) return false;
    if (SendTime != other.SendTime) return false;
    if (IsReconnection != other.IsReconnection) return false;
    if (CellId != other.CellId) return false;
    if (Channel != other.Channel) return false;
    if (OsVersion != other.OsVersion) return false;
    if (OppVersion != other.OppVersion) return false;
    if (DistinctId != other.DistinctId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionID != 0L) hash ^= SessionID.GetHashCode();
    if (GateId != 0) hash ^= GateId.GetHashCode();
    if (Ip.Length != 0) hash ^= Ip.GetHashCode();
    if (IsNeedOverload != false) hash ^= IsNeedOverload.GetHashCode();
    if (IsNewUser != false) hash ^= IsNewUser.GetHashCode();
    if (Account.Length != 0) hash ^= Account.GetHashCode();
    if (Password.Length != 0) hash ^= Password.GetHashCode();
    if (LoginType != global::LoginType.Account) hash ^= LoginType.GetHashCode();
    if (Version.Length != 0) hash ^= Version.GetHashCode();
    if (IsMandatory != false) hash ^= IsMandatory.GetHashCode();
    if (Pt != 0) hash ^= Pt.GetHashCode();
    if (Udid.Length != 0) hash ^= Udid.GetHashCode();
    if (OsInfo.Length != 0) hash ^= OsInfo.GetHashCode();
    if (DeviceType.Length != 0) hash ^= DeviceType.GetHashCode();
    if (DeviceModel.Length != 0) hash ^= DeviceModel.GetHashCode();
    if (RegistrationToken.Length != 0) hash ^= RegistrationToken.GetHashCode();
    if (SendTime != 0L) hash ^= SendTime.GetHashCode();
    if (IsReconnection != false) hash ^= IsReconnection.GetHashCode();
    if (CellId != 0) hash ^= CellId.GetHashCode();
    if (Channel.Length != 0) hash ^= Channel.GetHashCode();
    if (OsVersion.Length != 0) hash ^= OsVersion.GetHashCode();
    if (OppVersion.Length != 0) hash ^= OppVersion.GetHashCode();
    if (DistinctId.Length != 0) hash ^= DistinctId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionID != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(SessionID);
    }
    if (GateId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(GateId);
    }
    if (Ip.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Ip);
    }
    if (IsNeedOverload != false) {
      output.WriteRawTag(32);
      output.WriteBool(IsNeedOverload);
    }
    if (Account.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Account);
    }
    if (Password.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Password);
    }
    if (LoginType != global::LoginType.Account) {
      output.WriteRawTag(56);
      output.WriteEnum((int) LoginType);
    }
    if (Version.Length != 0) {
      output.WriteRawTag(66);
      output.WriteString(Version);
    }
    if (IsMandatory != false) {
      output.WriteRawTag(72);
      output.WriteBool(IsMandatory);
    }
    if (Pt != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(Pt);
    }
    if (Udid.Length != 0) {
      output.WriteRawTag(90);
      output.WriteString(Udid);
    }
    if (OsInfo.Length != 0) {
      output.WriteRawTag(98);
      output.WriteString(OsInfo);
    }
    if (DeviceType.Length != 0) {
      output.WriteRawTag(106);
      output.WriteString(DeviceType);
    }
    if (DeviceModel.Length != 0) {
      output.WriteRawTag(114);
      output.WriteString(DeviceModel);
    }
    if (RegistrationToken.Length != 0) {
      output.WriteRawTag(122);
      output.WriteString(RegistrationToken);
    }
    if (SendTime != 0L) {
      output.WriteRawTag(136, 1);
      output.WriteInt64(SendTime);
    }
    if (IsReconnection != false) {
      output.WriteRawTag(144, 1);
      output.WriteBool(IsReconnection);
    }
    if (CellId != 0) {
      output.WriteRawTag(152, 1);
      output.WriteInt32(CellId);
    }
    if (IsNewUser != false) {
      output.WriteRawTag(160, 1);
      output.WriteBool(IsNewUser);
    }
    if (Channel.Length != 0) {
      output.WriteRawTag(170, 1);
      output.WriteString(Channel);
    }
    if (OsVersion.Length != 0) {
      output.WriteRawTag(178, 1);
      output.WriteString(OsVersion);
    }
    if (OppVersion.Length != 0) {
      output.WriteRawTag(186, 1);
      output.WriteString(OppVersion);
    }
    if (DistinctId.Length != 0) {
      output.WriteRawTag(194, 1);
      output.WriteString(DistinctId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionID != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SessionID);
    }
    if (GateId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GateId);
    }
    if (Ip.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
    }
    if (IsNeedOverload != false) {
      size += 1 + 1;
    }
    if (IsNewUser != false) {
      size += 2 + 1;
    }
    if (Account.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
    }
    if (Password.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
    }
    if (LoginType != global::LoginType.Account) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LoginType);
    }
    if (Version.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
    }
    if (IsMandatory != false) {
      size += 1 + 1;
    }
    if (Pt != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pt);
    }
    if (Udid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Udid);
    }
    if (OsInfo.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(OsInfo);
    }
    if (DeviceType.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceType);
    }
    if (DeviceModel.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceModel);
    }
    if (RegistrationToken.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RegistrationToken);
    }
    if (SendTime != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(SendTime);
    }
    if (IsReconnection != false) {
      size += 2 + 1;
    }
    if (CellId != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(CellId);
    }
    if (Channel.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Channel);
    }
    if (OsVersion.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(OsVersion);
    }
    if (OppVersion.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(OppVersion);
    }
    if (DistinctId.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(DistinctId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LoginRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionID != 0L) {
      SessionID = other.SessionID;
    }
    if (other.GateId != 0) {
      GateId = other.GateId;
    }
    if (other.Ip.Length != 0) {
      Ip = other.Ip;
    }
    if (other.IsNeedOverload != false) {
      IsNeedOverload = other.IsNeedOverload;
    }
    if (other.IsNewUser != false) {
      IsNewUser = other.IsNewUser;
    }
    if (other.Account.Length != 0) {
      Account = other.Account;
    }
    if (other.Password.Length != 0) {
      Password = other.Password;
    }
    if (other.LoginType != global::LoginType.Account) {
      LoginType = other.LoginType;
    }
    if (other.Version.Length != 0) {
      Version = other.Version;
    }
    if (other.IsMandatory != false) {
      IsMandatory = other.IsMandatory;
    }
    if (other.Pt != 0) {
      Pt = other.Pt;
    }
    if (other.Udid.Length != 0) {
      Udid = other.Udid;
    }
    if (other.OsInfo.Length != 0) {
      OsInfo = other.OsInfo;
    }
    if (other.DeviceType.Length != 0) {
      DeviceType = other.DeviceType;
    }
    if (other.DeviceModel.Length != 0) {
      DeviceModel = other.DeviceModel;
    }
    if (other.RegistrationToken.Length != 0) {
      RegistrationToken = other.RegistrationToken;
    }
    if (other.SendTime != 0L) {
      SendTime = other.SendTime;
    }
    if (other.IsReconnection != false) {
      IsReconnection = other.IsReconnection;
    }
    if (other.CellId != 0) {
      CellId = other.CellId;
    }
    if (other.Channel.Length != 0) {
      Channel = other.Channel;
    }
    if (other.OsVersion.Length != 0) {
      OsVersion = other.OsVersion;
    }
    if (other.OppVersion.Length != 0) {
      OppVersion = other.OppVersion;
    }
    if (other.DistinctId.Length != 0) {
      DistinctId = other.DistinctId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SessionID = input.ReadInt64();
          break;
        }
        case 16: {
          GateId = input.ReadInt32();
          break;
        }
        case 26: {
          Ip = input.ReadString();
          break;
        }
        case 32: {
          IsNeedOverload = input.ReadBool();
          break;
        }
        case 42: {
          Account = input.ReadString();
          break;
        }
        case 50: {
          Password = input.ReadString();
          break;
        }
        case 56: {
          LoginType = (global::LoginType) input.ReadEnum();
          break;
        }
        case 66: {
          Version = input.ReadString();
          break;
        }
        case 72: {
          IsMandatory = input.ReadBool();
          break;
        }
        case 80: {
          Pt = input.ReadInt32();
          break;
        }
        case 90: {
          Udid = input.ReadString();
          break;
        }
        case 98: {
          OsInfo = input.ReadString();
          break;
        }
        case 106: {
          DeviceType = input.ReadString();
          break;
        }
        case 114: {
          DeviceModel = input.ReadString();
          break;
        }
        case 122: {
          RegistrationToken = input.ReadString();
          break;
        }
        case 136: {
          SendTime = input.ReadInt64();
          break;
        }
        case 144: {
          IsReconnection = input.ReadBool();
          break;
        }
        case 152: {
          CellId = input.ReadInt32();
          break;
        }
        case 160: {
          IsNewUser = input.ReadBool();
          break;
        }
        case 170: {
          Channel = input.ReadString();
          break;
        }
        case 178: {
          OsVersion = input.ReadString();
          break;
        }
        case 186: {
          OppVersion = input.ReadString();
          break;
        }
        case 194: {
          DistinctId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class LoginResponse : pb::IMessage<LoginResponse> {
  private static readonly pb::MessageParser<LoginResponse> _parser = new pb::MessageParser<LoginResponse>(() => new LoginResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LoginResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::HallLoginMessageReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginResponse(LoginResponse other) : this() {
    sessionID_ = other.sessionID_;
    isCreate_ = other.isCreate_;
    loginError_ = other.loginError_;
    uid_ = other.uid_;
    onlineTime_ = other.onlineTime_;
    account_ = other.account_;
    accountId_ = other.accountId_;
    password_ = other.password_;
    isRealName_ = other.isRealName_;
    age_ = other.age_;
    isReconnection_ = other.isReconnection_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginResponse Clone() {
    return new LoginResponse(this);
  }

  /// <summary>Field number for the "sessionID" field.</summary>
  public const int SessionIDFieldNumber = 1;
  private long sessionID_;
  /// <summary>
  /// 会话ID（服务器内部使用）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SessionID {
    get { return sessionID_; }
    set {
      sessionID_ = value;
    }
  }

  /// <summary>Field number for the "isCreate" field.</summary>
  public const int IsCreateFieldNumber = 2;
  private bool isCreate_;
  /// <summary>
  /// 是否是创建新角色（服务器内部使用）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsCreate {
    get { return isCreate_; }
    set {
      isCreate_ = value;
    }
  }

  /// <summary>Field number for the "loginError" field.</summary>
  public const int LoginErrorFieldNumber = 3;
  private global::LoginErrorCode loginError_ = global::LoginErrorCode.Success;
  /// <summary>
  /// 登陆错误码
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LoginErrorCode LoginError {
    get { return loginError_; }
    set {
      loginError_ = value;
    }
  }

  /// <summary>Field number for the "uid" field.</summary>
  public const int UidFieldNumber = 4;
  private long uid_;
  /// <summary>
  ///用户id 		
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Uid {
    get { return uid_; }
    set {
      uid_ = value;
    }
  }

  /// <summary>Field number for the "onlineTime" field.</summary>
  public const int OnlineTimeFieldNumber = 5;
  private int onlineTime_;
  /// <summary>
  /// 在线时长（秒）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OnlineTime {
    get { return onlineTime_; }
    set {
      onlineTime_ = value;
    }
  }

  /// <summary>Field number for the "account" field.</summary>
  public const int AccountFieldNumber = 6;
  private string account_ = "";
  /// <summary>
  ///账号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Account {
    get { return account_; }
    set {
      account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "accountId" field.</summary>
  public const int AccountIdFieldNumber = 7;
  private long accountId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long AccountId {
    get { return accountId_; }
    set {
      accountId_ = value;
    }
  }

  /// <summary>Field number for the "password" field.</summary>
  public const int PasswordFieldNumber = 8;
  private string password_ = "";
  /// <summary>
  ///密码
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Password {
    get { return password_; }
    set {
      password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "isRealName" field.</summary>
  public const int IsRealNameFieldNumber = 9;
  private bool isRealName_;
  /// <summary>
  /// 是否实名
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsRealName {
    get { return isRealName_; }
    set {
      isRealName_ = value;
    }
  }

  /// <summary>Field number for the "age" field.</summary>
  public const int AgeFieldNumber = 10;
  private int age_;
  /// <summary>
  /// 年龄
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Age {
    get { return age_; }
    set {
      age_ = value;
    }
  }

  /// <summary>Field number for the "isReconnection" field.</summary>
  public const int IsReconnectionFieldNumber = 11;
  private bool isReconnection_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsReconnection {
    get { return isReconnection_; }
    set {
      isReconnection_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LoginResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LoginResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionID != other.SessionID) return false;
    if (IsCreate != other.IsCreate) return false;
    if (LoginError != other.LoginError) return false;
    if (Uid != other.Uid) return false;
    if (OnlineTime != other.OnlineTime) return false;
    if (Account != other.Account) return false;
    if (AccountId != other.AccountId) return false;
    if (Password != other.Password) return false;
    if (IsRealName != other.IsRealName) return false;
    if (Age != other.Age) return false;
    if (IsReconnection != other.IsReconnection) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionID != 0L) hash ^= SessionID.GetHashCode();
    if (IsCreate != false) hash ^= IsCreate.GetHashCode();
    if (LoginError != global::LoginErrorCode.Success) hash ^= LoginError.GetHashCode();
    if (Uid != 0L) hash ^= Uid.GetHashCode();
    if (OnlineTime != 0) hash ^= OnlineTime.GetHashCode();
    if (Account.Length != 0) hash ^= Account.GetHashCode();
    if (AccountId != 0L) hash ^= AccountId.GetHashCode();
    if (Password.Length != 0) hash ^= Password.GetHashCode();
    if (IsRealName != false) hash ^= IsRealName.GetHashCode();
    if (Age != 0) hash ^= Age.GetHashCode();
    if (IsReconnection != false) hash ^= IsReconnection.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionID != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(SessionID);
    }
    if (IsCreate != false) {
      output.WriteRawTag(16);
      output.WriteBool(IsCreate);
    }
    if (LoginError != global::LoginErrorCode.Success) {
      output.WriteRawTag(24);
      output.WriteEnum((int) LoginError);
    }
    if (Uid != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(Uid);
    }
    if (OnlineTime != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(OnlineTime);
    }
    if (Account.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Account);
    }
    if (AccountId != 0L) {
      output.WriteRawTag(56);
      output.WriteInt64(AccountId);
    }
    if (Password.Length != 0) {
      output.WriteRawTag(66);
      output.WriteString(Password);
    }
    if (IsRealName != false) {
      output.WriteRawTag(72);
      output.WriteBool(IsRealName);
    }
    if (Age != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(Age);
    }
    if (IsReconnection != false) {
      output.WriteRawTag(88);
      output.WriteBool(IsReconnection);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionID != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SessionID);
    }
    if (IsCreate != false) {
      size += 1 + 1;
    }
    if (LoginError != global::LoginErrorCode.Success) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LoginError);
    }
    if (Uid != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
    }
    if (OnlineTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OnlineTime);
    }
    if (Account.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
    }
    if (AccountId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(AccountId);
    }
    if (Password.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
    }
    if (IsRealName != false) {
      size += 1 + 1;
    }
    if (Age != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Age);
    }
    if (IsReconnection != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LoginResponse other) {
    if (other == null) {
      return;
    }
    if (other.SessionID != 0L) {
      SessionID = other.SessionID;
    }
    if (other.IsCreate != false) {
      IsCreate = other.IsCreate;
    }
    if (other.LoginError != global::LoginErrorCode.Success) {
      LoginError = other.LoginError;
    }
    if (other.Uid != 0L) {
      Uid = other.Uid;
    }
    if (other.OnlineTime != 0) {
      OnlineTime = other.OnlineTime;
    }
    if (other.Account.Length != 0) {
      Account = other.Account;
    }
    if (other.AccountId != 0L) {
      AccountId = other.AccountId;
    }
    if (other.Password.Length != 0) {
      Password = other.Password;
    }
    if (other.IsRealName != false) {
      IsRealName = other.IsRealName;
    }
    if (other.Age != 0) {
      Age = other.Age;
    }
    if (other.IsReconnection != false) {
      IsReconnection = other.IsReconnection;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SessionID = input.ReadInt64();
          break;
        }
        case 16: {
          IsCreate = input.ReadBool();
          break;
        }
        case 24: {
          LoginError = (global::LoginErrorCode) input.ReadEnum();
          break;
        }
        case 32: {
          Uid = input.ReadInt64();
          break;
        }
        case 40: {
          OnlineTime = input.ReadInt32();
          break;
        }
        case 50: {
          Account = input.ReadString();
          break;
        }
        case 56: {
          AccountId = input.ReadInt64();
          break;
        }
        case 66: {
          Password = input.ReadString();
          break;
        }
        case 72: {
          IsRealName = input.ReadBool();
          break;
        }
        case 80: {
          Age = input.ReadInt32();
          break;
        }
        case 88: {
          IsReconnection = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class KillUserResponse : pb::IMessage<KillUserResponse> {
  private static readonly pb::MessageParser<KillUserResponse> _parser = new pb::MessageParser<KillUserResponse>(() => new KillUserResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<KillUserResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::HallLoginMessageReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public KillUserResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public KillUserResponse(KillUserResponse other) : this() {
    killUserType_ = other.killUserType_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public KillUserResponse Clone() {
    return new KillUserResponse(this);
  }

  /// <summary>Field number for the "killUserType" field.</summary>
  public const int KillUserTypeFieldNumber = 1;
  private global::KillUserType killUserType_ = global::KillUserType.SameAccount;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::KillUserType KillUserType {
    get { return killUserType_; }
    set {
      killUserType_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as KillUserResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(KillUserResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (KillUserType != other.KillUserType) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (KillUserType != global::KillUserType.SameAccount) hash ^= KillUserType.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (KillUserType != global::KillUserType.SameAccount) {
      output.WriteRawTag(8);
      output.WriteEnum((int) KillUserType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (KillUserType != global::KillUserType.SameAccount) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) KillUserType);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(KillUserResponse other) {
    if (other == null) {
      return;
    }
    if (other.KillUserType != global::KillUserType.SameAccount) {
      KillUserType = other.KillUserType;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          KillUserType = (global::KillUserType) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class MessageSeedResponse : pb::IMessage<MessageSeedResponse> {
  private static readonly pb::MessageParser<MessageSeedResponse> _parser = new pb::MessageParser<MessageSeedResponse>(() => new MessageSeedResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MessageSeedResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::HallLoginMessageReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MessageSeedResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MessageSeedResponse(MessageSeedResponse other) : this() {
    seed_ = other.seed_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MessageSeedResponse Clone() {
    return new MessageSeedResponse(this);
  }

  /// <summary>Field number for the "seed" field.</summary>
  public const int SeedFieldNumber = 1;
  private uint seed_;
  /// <summary>
  /// 消息种子
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Seed {
    get { return seed_; }
    set {
      seed_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MessageSeedResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MessageSeedResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seed != other.Seed) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seed != 0) hash ^= Seed.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seed != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Seed);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seed != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seed);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MessageSeedResponse other) {
    if (other == null) {
      return;
    }
    if (other.Seed != 0) {
      Seed = other.Seed;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Seed = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class LoginFinishResponse : pb::IMessage<LoginFinishResponse> {
  private static readonly pb::MessageParser<LoginFinishResponse> _parser = new pb::MessageParser<LoginFinishResponse>(() => new LoginFinishResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LoginFinishResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::HallLoginMessageReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginFinishResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginFinishResponse(LoginFinishResponse other) : this() {
    finishTime_ = other.finishTime_;
    reLogin_ = other.reLogin_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginFinishResponse Clone() {
    return new LoginFinishResponse(this);
  }

  /// <summary>Field number for the "finishTime" field.</summary>
  public const int FinishTimeFieldNumber = 1;
  private long finishTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long FinishTime {
    get { return finishTime_; }
    set {
      finishTime_ = value;
    }
  }

  /// <summary>Field number for the "reLogin" field.</summary>
  public const int ReLoginFieldNumber = 2;
  private bool reLogin_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ReLogin {
    get { return reLogin_; }
    set {
      reLogin_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LoginFinishResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LoginFinishResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FinishTime != other.FinishTime) return false;
    if (ReLogin != other.ReLogin) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (FinishTime != 0L) hash ^= FinishTime.GetHashCode();
    if (ReLogin != false) hash ^= ReLogin.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (FinishTime != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(FinishTime);
    }
    if (ReLogin != false) {
      output.WriteRawTag(16);
      output.WriteBool(ReLogin);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (FinishTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(FinishTime);
    }
    if (ReLogin != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LoginFinishResponse other) {
    if (other == null) {
      return;
    }
    if (other.FinishTime != 0L) {
      FinishTime = other.FinishTime;
    }
    if (other.ReLogin != false) {
      ReLogin = other.ReLogin;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          FinishTime = input.ReadInt64();
          break;
        }
        case 16: {
          ReLogin = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class VerifiedRequest : pb::IMessage<VerifiedRequest> {
  private static readonly pb::MessageParser<VerifiedRequest> _parser = new pb::MessageParser<VerifiedRequest>(() => new VerifiedRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VerifiedRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::HallLoginMessageReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VerifiedRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VerifiedRequest(VerifiedRequest other) : this() {
    name_ = other.name_;
    identification_ = other.identification_;
    age_ = other.age_;
    account_ = other.account_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VerifiedRequest Clone() {
    return new VerifiedRequest(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  /// <summary>
  /// 姓名
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "identification" field.</summary>
  public const int IdentificationFieldNumber = 2;
  private string identification_ = "";
  /// <summary>
  /// 身份证号码
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Identification {
    get { return identification_; }
    set {
      identification_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "age" field.</summary>
  public const int AgeFieldNumber = 3;
  private int age_;
  /// <summary>
  /// 年龄
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Age {
    get { return age_; }
    set {
      age_ = value;
    }
  }

  /// <summary>Field number for the "account" field.</summary>
  public const int AccountFieldNumber = 4;
  private string account_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Account {
    get { return account_; }
    set {
      account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VerifiedRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VerifiedRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (Identification != other.Identification) return false;
    if (Age != other.Age) return false;
    if (Account != other.Account) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Identification.Length != 0) hash ^= Identification.GetHashCode();
    if (Age != 0) hash ^= Age.GetHashCode();
    if (Account.Length != 0) hash ^= Account.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (Identification.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Identification);
    }
    if (Age != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Age);
    }
    if (Account.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Account);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Identification.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Identification);
    }
    if (Age != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Age);
    }
    if (Account.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VerifiedRequest other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Identification.Length != 0) {
      Identification = other.Identification;
    }
    if (other.Age != 0) {
      Age = other.Age;
    }
    if (other.Account.Length != 0) {
      Account = other.Account;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 18: {
          Identification = input.ReadString();
          break;
        }
        case 24: {
          Age = input.ReadInt32();
          break;
        }
        case 34: {
          Account = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class VerifiedResponse : pb::IMessage<VerifiedResponse> {
  private static readonly pb::MessageParser<VerifiedResponse> _parser = new pb::MessageParser<VerifiedResponse>(() => new VerifiedResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VerifiedResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::HallLoginMessageReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VerifiedResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VerifiedResponse(VerifiedResponse other) : this() {
    result_ = other.result_;
    onlineTime_ = other.onlineTime_;
    isRealName_ = other.isRealName_;
    age_ = other.age_;
    underageRemainingTime_ = other.underageRemainingTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VerifiedResponse Clone() {
    return new VerifiedResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private global::VerifiedType result_ = global::VerifiedType.VerifiedSuc;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VerifiedType Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "onlineTime" field.</summary>
  public const int OnlineTimeFieldNumber = 2;
  private int onlineTime_;
  /// <summary>
  /// 在线时长（秒） 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OnlineTime {
    get { return onlineTime_; }
    set {
      onlineTime_ = value;
    }
  }

  /// <summary>Field number for the "isRealName" field.</summary>
  public const int IsRealNameFieldNumber = 3;
  private bool isRealName_;
  /// <summary>
  /// 是否实名
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsRealName {
    get { return isRealName_; }
    set {
      isRealName_ = value;
    }
  }

  /// <summary>Field number for the "age" field.</summary>
  public const int AgeFieldNumber = 4;
  private int age_;
  /// <summary>
  /// 年龄
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Age {
    get { return age_; }
    set {
      age_ = value;
    }
  }

  /// <summary>Field number for the "underageRemainingTime" field.</summary>
  public const int UnderageRemainingTimeFieldNumber = 5;
  private int underageRemainingTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UnderageRemainingTime {
    get { return underageRemainingTime_; }
    set {
      underageRemainingTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VerifiedResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VerifiedResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (OnlineTime != other.OnlineTime) return false;
    if (IsRealName != other.IsRealName) return false;
    if (Age != other.Age) return false;
    if (UnderageRemainingTime != other.UnderageRemainingTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != global::VerifiedType.VerifiedSuc) hash ^= Result.GetHashCode();
    if (OnlineTime != 0) hash ^= OnlineTime.GetHashCode();
    if (IsRealName != false) hash ^= IsRealName.GetHashCode();
    if (Age != 0) hash ^= Age.GetHashCode();
    if (UnderageRemainingTime != 0) hash ^= UnderageRemainingTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != global::VerifiedType.VerifiedSuc) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Result);
    }
    if (OnlineTime != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(OnlineTime);
    }
    if (IsRealName != false) {
      output.WriteRawTag(24);
      output.WriteBool(IsRealName);
    }
    if (Age != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Age);
    }
    if (UnderageRemainingTime != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(UnderageRemainingTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != global::VerifiedType.VerifiedSuc) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
    }
    if (OnlineTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OnlineTime);
    }
    if (IsRealName != false) {
      size += 1 + 1;
    }
    if (Age != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Age);
    }
    if (UnderageRemainingTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnderageRemainingTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VerifiedResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != global::VerifiedType.VerifiedSuc) {
      Result = other.Result;
    }
    if (other.OnlineTime != 0) {
      OnlineTime = other.OnlineTime;
    }
    if (other.IsRealName != false) {
      IsRealName = other.IsRealName;
    }
    if (other.Age != 0) {
      Age = other.Age;
    }
    if (other.UnderageRemainingTime != 0) {
      UnderageRemainingTime = other.UnderageRemainingTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Result = (global::VerifiedType) input.ReadEnum();
          break;
        }
        case 16: {
          OnlineTime = input.ReadInt32();
          break;
        }
        case 24: {
          IsRealName = input.ReadBool();
          break;
        }
        case 32: {
          Age = input.ReadInt32();
          break;
        }
        case 40: {
          UnderageRemainingTime = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///心跳
/// </summary>
public sealed partial class HeartRequest : pb::IMessage<HeartRequest> {
  private static readonly pb::MessageParser<HeartRequest> _parser = new pb::MessageParser<HeartRequest>(() => new HeartRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HeartRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::HallLoginMessageReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HeartRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HeartRequest(HeartRequest other) : this() {
    userId_ = other.userId_;
    sessionID_ = other.sessionID_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HeartRequest Clone() {
    return new HeartRequest(this);
  }

  /// <summary>Field number for the "userId" field.</summary>
  public const int UserIdFieldNumber = 1;
  private long userId_;
  /// <summary>
  ///（服务器内部使用）	
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "sessionID" field.</summary>
  public const int SessionIDFieldNumber = 2;
  private long sessionID_;
  /// <summary>
  ///（服务器内部使用）	
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SessionID {
    get { return sessionID_; }
    set {
      sessionID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HeartRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HeartRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    if (SessionID != other.SessionID) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserId != 0L) hash ^= UserId.GetHashCode();
    if (SessionID != 0L) hash ^= SessionID.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(UserId);
    }
    if (SessionID != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(SessionID);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
    }
    if (SessionID != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SessionID);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HeartRequest other) {
    if (other == null) {
      return;
    }
    if (other.UserId != 0L) {
      UserId = other.UserId;
    }
    if (other.SessionID != 0L) {
      SessionID = other.SessionID;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          UserId = input.ReadInt64();
          break;
        }
        case 16: {
          SessionID = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class HeartResponse : pb::IMessage<HeartResponse> {
  private static readonly pb::MessageParser<HeartResponse> _parser = new pb::MessageParser<HeartResponse>(() => new HeartResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HeartResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::HallLoginMessageReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HeartResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HeartResponse(HeartResponse other) : this() {
    serverTime_ = other.serverTime_;
    onlineTime_ = other.onlineTime_;
    sessionTicket_ = other.sessionTicket_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HeartResponse Clone() {
    return new HeartResponse(this);
  }

  /// <summary>Field number for the "serverTime" field.</summary>
  public const int ServerTimeFieldNumber = 1;
  private long serverTime_;
  /// <summary>
  ///服务器时间 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ServerTime {
    get { return serverTime_; }
    set {
      serverTime_ = value;
    }
  }

  /// <summary>Field number for the "onlineTime" field.</summary>
  public const int OnlineTimeFieldNumber = 2;
  private int onlineTime_;
  /// <summary>
  /// 在线时长（秒）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OnlineTime {
    get { return onlineTime_; }
    set {
      onlineTime_ = value;
    }
  }

  /// <summary>Field number for the "sessionTicket" field.</summary>
  public const int SessionTicketFieldNumber = 3;
  private string sessionTicket_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionTicket {
    get { return sessionTicket_; }
    set {
      sessionTicket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HeartResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HeartResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ServerTime != other.ServerTime) return false;
    if (OnlineTime != other.OnlineTime) return false;
    if (SessionTicket != other.SessionTicket) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ServerTime != 0L) hash ^= ServerTime.GetHashCode();
    if (OnlineTime != 0) hash ^= OnlineTime.GetHashCode();
    if (SessionTicket.Length != 0) hash ^= SessionTicket.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ServerTime != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(ServerTime);
    }
    if (OnlineTime != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(OnlineTime);
    }
    if (SessionTicket.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(SessionTicket);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ServerTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ServerTime);
    }
    if (OnlineTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OnlineTime);
    }
    if (SessionTicket.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionTicket);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HeartResponse other) {
    if (other == null) {
      return;
    }
    if (other.ServerTime != 0L) {
      ServerTime = other.ServerTime;
    }
    if (other.OnlineTime != 0) {
      OnlineTime = other.OnlineTime;
    }
    if (other.SessionTicket.Length != 0) {
      SessionTicket = other.SessionTicket;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ServerTime = input.ReadInt64();
          break;
        }
        case 16: {
          OnlineTime = input.ReadInt32();
          break;
        }
        case 26: {
          SessionTicket = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class TicketLoginReqData : pb::IMessage<TicketLoginReqData> {
  private static readonly pb::MessageParser<TicketLoginReqData> _parser = new pb::MessageParser<TicketLoginReqData>(() => new TicketLoginReqData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TicketLoginReqData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::HallLoginMessageReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TicketLoginReqData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TicketLoginReqData(TicketLoginReqData other) : this() {
    sessionID_ = other.sessionID_;
    gateId_ = other.gateId_;
    ip_ = other.ip_;
    cellId_ = other.cellId_;
    forceKickout_ = other.forceKickout_;
    platform_ = other.platform_;
    deviceId_ = other.deviceId_;
    osInfo_ = other.osInfo_;
    deviceType_ = other.deviceType_;
    deviceModel_ = other.deviceModel_;
    registrationToken_ = other.registrationToken_;
    sendTime_ = other.sendTime_;
    isReconnection_ = other.isReconnection_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TicketLoginReqData Clone() {
    return new TicketLoginReqData(this);
  }

  /// <summary>Field number for the "sessionID_" field.</summary>
  public const int SessionIDFieldNumber = 1;
  private long sessionID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SessionID {
    get { return sessionID_; }
    set {
      sessionID_ = value;
    }
  }

  /// <summary>Field number for the "gateId" field.</summary>
  public const int GateIdFieldNumber = 2;
  private int gateId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GateId {
    get { return gateId_; }
    set {
      gateId_ = value;
    }
  }

  /// <summary>Field number for the "ip" field.</summary>
  public const int IpFieldNumber = 3;
  private string ip_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Ip {
    get { return ip_; }
    set {
      ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "cellId_" field.</summary>
  public const int CellIdFieldNumber = 4;
  private int cellId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CellId {
    get { return cellId_; }
    set {
      cellId_ = value;
    }
  }

  /// <summary>Field number for the "forceKickout" field.</summary>
  public const int ForceKickoutFieldNumber = 5;
  private bool forceKickout_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ForceKickout {
    get { return forceKickout_; }
    set {
      forceKickout_ = value;
    }
  }

  /// <summary>Field number for the "platform" field.</summary>
  public const int PlatformFieldNumber = 6;
  private int platform_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Platform {
    get { return platform_; }
    set {
      platform_ = value;
    }
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 7;
  private string deviceId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "osInfo" field.</summary>
  public const int OsInfoFieldNumber = 8;
  private string osInfo_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string OsInfo {
    get { return osInfo_; }
    set {
      osInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "deviceType" field.</summary>
  public const int DeviceTypeFieldNumber = 9;
  private string deviceType_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceType {
    get { return deviceType_; }
    set {
      deviceType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "deviceModel" field.</summary>
  public const int DeviceModelFieldNumber = 10;
  private string deviceModel_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceModel {
    get { return deviceModel_; }
    set {
      deviceModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "registrationToken" field.</summary>
  public const int RegistrationTokenFieldNumber = 11;
  private string registrationToken_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RegistrationToken {
    get { return registrationToken_; }
    set {
      registrationToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "sendTime" field.</summary>
  public const int SendTimeFieldNumber = 12;
  private long sendTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SendTime {
    get { return sendTime_; }
    set {
      sendTime_ = value;
    }
  }

  /// <summary>Field number for the "isReconnection" field.</summary>
  public const int IsReconnectionFieldNumber = 13;
  private bool isReconnection_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsReconnection {
    get { return isReconnection_; }
    set {
      isReconnection_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TicketLoginReqData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TicketLoginReqData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionID != other.SessionID) return false;
    if (GateId != other.GateId) return false;
    if (Ip != other.Ip) return false;
    if (CellId != other.CellId) return false;
    if (ForceKickout != other.ForceKickout) return false;
    if (Platform != other.Platform) return false;
    if (DeviceId != other.DeviceId) return false;
    if (OsInfo != other.OsInfo) return false;
    if (DeviceType != other.DeviceType) return false;
    if (DeviceModel != other.DeviceModel) return false;
    if (RegistrationToken != other.RegistrationToken) return false;
    if (SendTime != other.SendTime) return false;
    if (IsReconnection != other.IsReconnection) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionID != 0L) hash ^= SessionID.GetHashCode();
    if (GateId != 0) hash ^= GateId.GetHashCode();
    if (Ip.Length != 0) hash ^= Ip.GetHashCode();
    if (CellId != 0) hash ^= CellId.GetHashCode();
    if (ForceKickout != false) hash ^= ForceKickout.GetHashCode();
    if (Platform != 0) hash ^= Platform.GetHashCode();
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (OsInfo.Length != 0) hash ^= OsInfo.GetHashCode();
    if (DeviceType.Length != 0) hash ^= DeviceType.GetHashCode();
    if (DeviceModel.Length != 0) hash ^= DeviceModel.GetHashCode();
    if (RegistrationToken.Length != 0) hash ^= RegistrationToken.GetHashCode();
    if (SendTime != 0L) hash ^= SendTime.GetHashCode();
    if (IsReconnection != false) hash ^= IsReconnection.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionID != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(SessionID);
    }
    if (GateId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(GateId);
    }
    if (Ip.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Ip);
    }
    if (CellId != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(CellId);
    }
    if (ForceKickout != false) {
      output.WriteRawTag(40);
      output.WriteBool(ForceKickout);
    }
    if (Platform != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Platform);
    }
    if (DeviceId.Length != 0) {
      output.WriteRawTag(58);
      output.WriteString(DeviceId);
    }
    if (OsInfo.Length != 0) {
      output.WriteRawTag(66);
      output.WriteString(OsInfo);
    }
    if (DeviceType.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(DeviceType);
    }
    if (DeviceModel.Length != 0) {
      output.WriteRawTag(82);
      output.WriteString(DeviceModel);
    }
    if (RegistrationToken.Length != 0) {
      output.WriteRawTag(90);
      output.WriteString(RegistrationToken);
    }
    if (SendTime != 0L) {
      output.WriteRawTag(96);
      output.WriteInt64(SendTime);
    }
    if (IsReconnection != false) {
      output.WriteRawTag(104);
      output.WriteBool(IsReconnection);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionID != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SessionID);
    }
    if (GateId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GateId);
    }
    if (Ip.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
    }
    if (CellId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CellId);
    }
    if (ForceKickout != false) {
      size += 1 + 1;
    }
    if (Platform != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Platform);
    }
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (OsInfo.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(OsInfo);
    }
    if (DeviceType.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceType);
    }
    if (DeviceModel.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceModel);
    }
    if (RegistrationToken.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RegistrationToken);
    }
    if (SendTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SendTime);
    }
    if (IsReconnection != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TicketLoginReqData other) {
    if (other == null) {
      return;
    }
    if (other.SessionID != 0L) {
      SessionID = other.SessionID;
    }
    if (other.GateId != 0) {
      GateId = other.GateId;
    }
    if (other.Ip.Length != 0) {
      Ip = other.Ip;
    }
    if (other.CellId != 0) {
      CellId = other.CellId;
    }
    if (other.ForceKickout != false) {
      ForceKickout = other.ForceKickout;
    }
    if (other.Platform != 0) {
      Platform = other.Platform;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.OsInfo.Length != 0) {
      OsInfo = other.OsInfo;
    }
    if (other.DeviceType.Length != 0) {
      DeviceType = other.DeviceType;
    }
    if (other.DeviceModel.Length != 0) {
      DeviceModel = other.DeviceModel;
    }
    if (other.RegistrationToken.Length != 0) {
      RegistrationToken = other.RegistrationToken;
    }
    if (other.SendTime != 0L) {
      SendTime = other.SendTime;
    }
    if (other.IsReconnection != false) {
      IsReconnection = other.IsReconnection;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SessionID = input.ReadInt64();
          break;
        }
        case 16: {
          GateId = input.ReadInt32();
          break;
        }
        case 26: {
          Ip = input.ReadString();
          break;
        }
        case 32: {
          CellId = input.ReadInt32();
          break;
        }
        case 40: {
          ForceKickout = input.ReadBool();
          break;
        }
        case 48: {
          Platform = input.ReadInt32();
          break;
        }
        case 58: {
          DeviceId = input.ReadString();
          break;
        }
        case 66: {
          OsInfo = input.ReadString();
          break;
        }
        case 74: {
          DeviceType = input.ReadString();
          break;
        }
        case 82: {
          DeviceModel = input.ReadString();
          break;
        }
        case 90: {
          RegistrationToken = input.ReadString();
          break;
        }
        case 96: {
          SendTime = input.ReadInt64();
          break;
        }
        case 104: {
          IsReconnection = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class TicketLoginExRequest : pb::IMessage<TicketLoginExRequest> {
  private static readonly pb::MessageParser<TicketLoginExRequest> _parser = new pb::MessageParser<TicketLoginExRequest>(() => new TicketLoginExRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TicketLoginExRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::HallLoginMessageReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TicketLoginExRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TicketLoginExRequest(TicketLoginExRequest other) : this() {
    ticket_ = other.ticket_;
    encryptedData_ = other.encryptedData_ != null ? other.encryptedData_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TicketLoginExRequest Clone() {
    return new TicketLoginExRequest(this);
  }

  /// <summary>Field number for the "ticket" field.</summary>
  public const int TicketFieldNumber = 1;
  private string ticket_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Ticket {
    get { return ticket_; }
    set {
      ticket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "encryptedData" field.</summary>
  public const int EncryptedDataFieldNumber = 2;
  private global::TicketLoginReqData encryptedData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TicketLoginReqData EncryptedData {
    get { return encryptedData_; }
    set {
      encryptedData_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TicketLoginExRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TicketLoginExRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Ticket != other.Ticket) return false;
    if (!object.Equals(EncryptedData, other.EncryptedData)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Ticket.Length != 0) hash ^= Ticket.GetHashCode();
    if (encryptedData_ != null) hash ^= EncryptedData.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Ticket.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Ticket);
    }
    if (encryptedData_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(EncryptedData);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Ticket.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticket);
    }
    if (encryptedData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncryptedData);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TicketLoginExRequest other) {
    if (other == null) {
      return;
    }
    if (other.Ticket.Length != 0) {
      Ticket = other.Ticket;
    }
    if (other.encryptedData_ != null) {
      if (encryptedData_ == null) {
        EncryptedData = new global::TicketLoginReqData();
      }
      EncryptedData.MergeFrom(other.EncryptedData);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Ticket = input.ReadString();
          break;
        }
        case 18: {
          if (encryptedData_ == null) {
            EncryptedData = new global::TicketLoginReqData();
          }
          input.ReadMessage(EncryptedData);
          break;
        }
      }
    }
  }

}

public sealed partial class TicketReLoginExRequest : pb::IMessage<TicketReLoginExRequest> {
  private static readonly pb::MessageParser<TicketReLoginExRequest> _parser = new pb::MessageParser<TicketReLoginExRequest>(() => new TicketReLoginExRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TicketReLoginExRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::HallLoginMessageReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TicketReLoginExRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TicketReLoginExRequest(TicketReLoginExRequest other) : this() {
    sessionTicket_ = other.sessionTicket_;
    data_ = other.data_ != null ? other.data_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TicketReLoginExRequest Clone() {
    return new TicketReLoginExRequest(this);
  }

  /// <summary>Field number for the "sessionTicket" field.</summary>
  public const int SessionTicketFieldNumber = 1;
  private string sessionTicket_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionTicket {
    get { return sessionTicket_; }
    set {
      sessionTicket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 2;
  private global::TicketLoginReqData data_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TicketLoginReqData Data {
    get { return data_; }
    set {
      data_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TicketReLoginExRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TicketReLoginExRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionTicket != other.SessionTicket) return false;
    if (!object.Equals(Data, other.Data)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionTicket.Length != 0) hash ^= SessionTicket.GetHashCode();
    if (data_ != null) hash ^= Data.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionTicket.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SessionTicket);
    }
    if (data_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Data);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionTicket.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionTicket);
    }
    if (data_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TicketReLoginExRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionTicket.Length != 0) {
      SessionTicket = other.SessionTicket;
    }
    if (other.data_ != null) {
      if (data_ == null) {
        Data = new global::TicketLoginReqData();
      }
      Data.MergeFrom(other.Data);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SessionTicket = input.ReadString();
          break;
        }
        case 18: {
          if (data_ == null) {
            Data = new global::TicketLoginReqData();
          }
          input.ReadMessage(Data);
          break;
        }
      }
    }
  }

}

public sealed partial class TicketLoginInternalRequest : pb::IMessage<TicketLoginInternalRequest> {
  private static readonly pb::MessageParser<TicketLoginInternalRequest> _parser = new pb::MessageParser<TicketLoginInternalRequest>(() => new TicketLoginInternalRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TicketLoginInternalRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::HallLoginMessageReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TicketLoginInternalRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TicketLoginInternalRequest(TicketLoginInternalRequest other) : this() {
    accountId_ = other.accountId_;
    account_ = other.account_;
    needOverload_ = other.needOverload_;
    data_ = other.data_ != null ? other.data_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TicketLoginInternalRequest Clone() {
    return new TicketLoginInternalRequest(this);
  }

  /// <summary>Field number for the "accountId" field.</summary>
  public const int AccountIdFieldNumber = 1;
  private long accountId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long AccountId {
    get { return accountId_; }
    set {
      accountId_ = value;
    }
  }

  /// <summary>Field number for the "account" field.</summary>
  public const int AccountFieldNumber = 2;
  private string account_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Account {
    get { return account_; }
    set {
      account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "needOverload" field.</summary>
  public const int NeedOverloadFieldNumber = 3;
  private bool needOverload_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool NeedOverload {
    get { return needOverload_; }
    set {
      needOverload_ = value;
    }
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 4;
  private global::TicketLoginReqData data_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TicketLoginReqData Data {
    get { return data_; }
    set {
      data_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TicketLoginInternalRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TicketLoginInternalRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AccountId != other.AccountId) return false;
    if (Account != other.Account) return false;
    if (NeedOverload != other.NeedOverload) return false;
    if (!object.Equals(Data, other.Data)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (AccountId != 0L) hash ^= AccountId.GetHashCode();
    if (Account.Length != 0) hash ^= Account.GetHashCode();
    if (NeedOverload != false) hash ^= NeedOverload.GetHashCode();
    if (data_ != null) hash ^= Data.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (AccountId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(AccountId);
    }
    if (Account.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Account);
    }
    if (NeedOverload != false) {
      output.WriteRawTag(24);
      output.WriteBool(NeedOverload);
    }
    if (data_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Data);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (AccountId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(AccountId);
    }
    if (Account.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
    }
    if (NeedOverload != false) {
      size += 1 + 1;
    }
    if (data_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TicketLoginInternalRequest other) {
    if (other == null) {
      return;
    }
    if (other.AccountId != 0L) {
      AccountId = other.AccountId;
    }
    if (other.Account.Length != 0) {
      Account = other.Account;
    }
    if (other.NeedOverload != false) {
      NeedOverload = other.NeedOverload;
    }
    if (other.data_ != null) {
      if (data_ == null) {
        Data = new global::TicketLoginReqData();
      }
      Data.MergeFrom(other.Data);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AccountId = input.ReadInt64();
          break;
        }
        case 18: {
          Account = input.ReadString();
          break;
        }
        case 24: {
          NeedOverload = input.ReadBool();
          break;
        }
        case 34: {
          if (data_ == null) {
            Data = new global::TicketLoginReqData();
          }
          input.ReadMessage(Data);
          break;
        }
      }
    }
  }

}

public sealed partial class LogoutRequest : pb::IMessage<LogoutRequest> {
  private static readonly pb::MessageParser<LogoutRequest> _parser = new pb::MessageParser<LogoutRequest>(() => new LogoutRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LogoutRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::HallLoginMessageReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LogoutRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LogoutRequest(LogoutRequest other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LogoutRequest Clone() {
    return new LogoutRequest(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LogoutRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LogoutRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LogoutRequest other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class LogoutResponse : pb::IMessage<LogoutResponse> {
  private static readonly pb::MessageParser<LogoutResponse> _parser = new pb::MessageParser<LogoutResponse>(() => new LogoutResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LogoutResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::HallLoginMessageReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LogoutResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LogoutResponse(LogoutResponse other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LogoutResponse Clone() {
    return new LogoutResponse(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LogoutResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LogoutResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LogoutResponse other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class LoginInternalRequest : pb::IMessage<LoginInternalRequest> {
  private static readonly pb::MessageParser<LoginInternalRequest> _parser = new pb::MessageParser<LoginInternalRequest>(() => new LoginInternalRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LoginInternalRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::HallLoginMessageReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginInternalRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginInternalRequest(LoginInternalRequest other) : this() {
    sessionID_ = other.sessionID_;
    gateId_ = other.gateId_;
    ip_ = other.ip_;
    isNeedOverload_ = other.isNeedOverload_;
    userId_ = other.userId_;
    cellId_ = other.cellId_;
    isNewUser_ = other.isNewUser_;
    account_ = other.account_;
    password_ = other.password_;
    loginType_ = other.loginType_;
    version_ = other.version_;
    isMandatory_ = other.isMandatory_;
    pt_ = other.pt_;
    udid_ = other.udid_;
    osInfo_ = other.osInfo_;
    deviceType_ = other.deviceType_;
    deviceModel_ = other.deviceModel_;
    registrationToken_ = other.registrationToken_;
    sendTime_ = other.sendTime_;
    isReconnection_ = other.isReconnection_;
    channel_ = other.channel_;
    osVersion_ = other.osVersion_;
    oppVersion_ = other.oppVersion_;
    distinctId_ = other.distinctId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginInternalRequest Clone() {
    return new LoginInternalRequest(this);
  }

  /// <summary>Field number for the "sessionID" field.</summary>
  public const int SessionIDFieldNumber = 1;
  private long sessionID_;
  /// <summary>
  /// 会话ID（服务器内部使用）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SessionID {
    get { return sessionID_; }
    set {
      sessionID_ = value;
    }
  }

  /// <summary>Field number for the "gateId" field.</summary>
  public const int GateIdFieldNumber = 2;
  private int gateId_;
  /// <summary>
  /// 网关ID（服务器内部使用）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GateId {
    get { return gateId_; }
    set {
      gateId_ = value;
    }
  }

  /// <summary>Field number for the "ip" field.</summary>
  public const int IpFieldNumber = 3;
  private string ip_ = "";
  /// <summary>
  /// IP地址（服务器内部使用）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Ip {
    get { return ip_; }
    set {
      ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "isNeedOverload" field.</summary>
  public const int IsNeedOverloadFieldNumber = 4;
  private bool isNeedOverload_;
  /// <summary>
  ///（服务器内部使用）  
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsNeedOverload {
    get { return isNeedOverload_; }
    set {
      isNeedOverload_ = value;
    }
  }

  /// <summary>Field number for the "userId" field.</summary>
  public const int UserIdFieldNumber = 19;
  private long userId_;
  /// <summary>
  ///（服务器内部使用）  
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "cellId" field.</summary>
  public const int CellIdFieldNumber = 20;
  private int cellId_;
  /// <summary>
  ///（服务器内部使用） 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CellId {
    get { return cellId_; }
    set {
      cellId_ = value;
    }
  }

  /// <summary>Field number for the "isNewUser" field.</summary>
  public const int IsNewUserFieldNumber = 21;
  private bool isNewUser_;
  /// <summary>
  ///（服务器内部使用） 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsNewUser {
    get { return isNewUser_; }
    set {
      isNewUser_ = value;
    }
  }

  /// <summary>Field number for the "account" field.</summary>
  public const int AccountFieldNumber = 5;
  private string account_ = "";
  /// <summary>
  /// 账号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Account {
    get { return account_; }
    set {
      account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "password" field.</summary>
  public const int PasswordFieldNumber = 6;
  private string password_ = "";
  /// <summary>
  /// 密码
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Password {
    get { return password_; }
    set {
      password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "loginType" field.</summary>
  public const int LoginTypeFieldNumber = 7;
  private global::LoginType loginType_ = global::LoginType.Account;
  /// <summary>
  /// 登录类型 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LoginType LoginType {
    get { return loginType_; }
    set {
      loginType_ = value;
    }
  }

  /// <summary>Field number for the "version" field.</summary>
  public const int VersionFieldNumber = 8;
  private string version_ = "";
  /// <summary>
  /// 版本号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Version {
    get { return version_; }
    set {
      version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "isMandatory" field.</summary>
  public const int IsMandatoryFieldNumber = 9;
  private bool isMandatory_;
  /// <summary>
  /// 是否强制登陆
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsMandatory {
    get { return isMandatory_; }
    set {
      isMandatory_ = value;
    }
  }

  /// <summary>Field number for the "pt" field.</summary>
  public const int PtFieldNumber = 10;
  private int pt_;
  /// <summary>
  /// 枚举，平台类型：1-> iOS，2-> android，3-> 其他]
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pt {
    get { return pt_; }
    set {
      pt_ = value;
    }
  }

  /// <summary>Field number for the "udid" field.</summary>
  public const int UdidFieldNumber = 11;
  private string udid_ = "";
  /// <summary>
  /// 设备唯一标识 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Udid {
    get { return udid_; }
    set {
      udid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "osInfo" field.</summary>
  public const int OsInfoFieldNumber = 12;
  private string osInfo_ = "";
  /// <summary>
  /// 操作系统信息，ios 11.0.1等]
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string OsInfo {
    get { return osInfo_; }
    set {
      osInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "deviceType" field.</summary>
  public const int DeviceTypeFieldNumber = 13;
  private string deviceType_ = "";
  /// <summary>
  /// 设备类型ipad， iPhone、HUAWEI、小米、OPPO、VIVO等
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceType {
    get { return deviceType_; }
    set {
      deviceType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "deviceModel" field.</summary>
  public const int DeviceModelFieldNumber = 14;
  private string deviceModel_ = "";
  /// <summary>
  /// 设备型号iPhone6s，ipad mini2，oppoR9，vivo x7等等	
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceModel {
    get { return deviceModel_; }
    set {
      deviceModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "registrationToken" field.</summary>
  public const int RegistrationTokenFieldNumber = 15;
  private string registrationToken_ = "";
  /// <summary>
  /// 设备的注册令	
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RegistrationToken {
    get { return registrationToken_; }
    set {
      registrationToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "sendTime" field.</summary>
  public const int SendTimeFieldNumber = 17;
  private long sendTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SendTime {
    get { return sendTime_; }
    set {
      sendTime_ = value;
    }
  }

  /// <summary>Field number for the "isReconnection" field.</summary>
  public const int IsReconnectionFieldNumber = 18;
  private bool isReconnection_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsReconnection {
    get { return isReconnection_; }
    set {
      isReconnection_ = value;
    }
  }

  /// <summary>Field number for the "channel" field.</summary>
  public const int ChannelFieldNumber = 22;
  private string channel_ = "";
  /// <summary>
  /// 来源渠道
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Channel {
    get { return channel_; }
    set {
      channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "osVersion" field.</summary>
  public const int OsVersionFieldNumber = 23;
  private string osVersion_ = "";
  /// <summary>
  /// 操作系统版本
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string OsVersion {
    get { return osVersion_; }
    set {
      osVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "oppVersion" field.</summary>
  public const int OppVersionFieldNumber = 24;
  private string oppVersion_ = "";
  /// <summary>
  /// app版本号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string OppVersion {
    get { return oppVersion_; }
    set {
      oppVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "distinctId" field.</summary>
  public const int DistinctIdFieldNumber = 25;
  private string distinctId_ = "";
  /// <summary>
  /// 访客id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DistinctId {
    get { return distinctId_; }
    set {
      distinctId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LoginInternalRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LoginInternalRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionID != other.SessionID) return false;
    if (GateId != other.GateId) return false;
    if (Ip != other.Ip) return false;
    if (IsNeedOverload != other.IsNeedOverload) return false;
    if (UserId != other.UserId) return false;
    if (CellId != other.CellId) return false;
    if (IsNewUser != other.IsNewUser) return false;
    if (Account != other.Account) return false;
    if (Password != other.Password) return false;
    if (LoginType != other.LoginType) return false;
    if (Version != other.Version) return false;
    if (IsMandatory != other.IsMandatory) return false;
    if (Pt != other.Pt) return false;
    if (Udid != other.Udid) return false;
    if (OsInfo != other.OsInfo) return false;
    if (DeviceType != other.DeviceType) return false;
    if (DeviceModel != other.DeviceModel) return false;
    if (RegistrationToken != other.RegistrationToken) return false;
    if (SendTime != other.SendTime) return false;
    if (IsReconnection != other.IsReconnection) return false;
    if (Channel != other.Channel) return false;
    if (OsVersion != other.OsVersion) return false;
    if (OppVersion != other.OppVersion) return false;
    if (DistinctId != other.DistinctId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionID != 0L) hash ^= SessionID.GetHashCode();
    if (GateId != 0) hash ^= GateId.GetHashCode();
    if (Ip.Length != 0) hash ^= Ip.GetHashCode();
    if (IsNeedOverload != false) hash ^= IsNeedOverload.GetHashCode();
    if (UserId != 0L) hash ^= UserId.GetHashCode();
    if (CellId != 0) hash ^= CellId.GetHashCode();
    if (IsNewUser != false) hash ^= IsNewUser.GetHashCode();
    if (Account.Length != 0) hash ^= Account.GetHashCode();
    if (Password.Length != 0) hash ^= Password.GetHashCode();
    if (LoginType != global::LoginType.Account) hash ^= LoginType.GetHashCode();
    if (Version.Length != 0) hash ^= Version.GetHashCode();
    if (IsMandatory != false) hash ^= IsMandatory.GetHashCode();
    if (Pt != 0) hash ^= Pt.GetHashCode();
    if (Udid.Length != 0) hash ^= Udid.GetHashCode();
    if (OsInfo.Length != 0) hash ^= OsInfo.GetHashCode();
    if (DeviceType.Length != 0) hash ^= DeviceType.GetHashCode();
    if (DeviceModel.Length != 0) hash ^= DeviceModel.GetHashCode();
    if (RegistrationToken.Length != 0) hash ^= RegistrationToken.GetHashCode();
    if (SendTime != 0L) hash ^= SendTime.GetHashCode();
    if (IsReconnection != false) hash ^= IsReconnection.GetHashCode();
    if (Channel.Length != 0) hash ^= Channel.GetHashCode();
    if (OsVersion.Length != 0) hash ^= OsVersion.GetHashCode();
    if (OppVersion.Length != 0) hash ^= OppVersion.GetHashCode();
    if (DistinctId.Length != 0) hash ^= DistinctId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionID != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(SessionID);
    }
    if (GateId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(GateId);
    }
    if (Ip.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Ip);
    }
    if (IsNeedOverload != false) {
      output.WriteRawTag(32);
      output.WriteBool(IsNeedOverload);
    }
    if (Account.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Account);
    }
    if (Password.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Password);
    }
    if (LoginType != global::LoginType.Account) {
      output.WriteRawTag(56);
      output.WriteEnum((int) LoginType);
    }
    if (Version.Length != 0) {
      output.WriteRawTag(66);
      output.WriteString(Version);
    }
    if (IsMandatory != false) {
      output.WriteRawTag(72);
      output.WriteBool(IsMandatory);
    }
    if (Pt != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(Pt);
    }
    if (Udid.Length != 0) {
      output.WriteRawTag(90);
      output.WriteString(Udid);
    }
    if (OsInfo.Length != 0) {
      output.WriteRawTag(98);
      output.WriteString(OsInfo);
    }
    if (DeviceType.Length != 0) {
      output.WriteRawTag(106);
      output.WriteString(DeviceType);
    }
    if (DeviceModel.Length != 0) {
      output.WriteRawTag(114);
      output.WriteString(DeviceModel);
    }
    if (RegistrationToken.Length != 0) {
      output.WriteRawTag(122);
      output.WriteString(RegistrationToken);
    }
    if (SendTime != 0L) {
      output.WriteRawTag(136, 1);
      output.WriteInt64(SendTime);
    }
    if (IsReconnection != false) {
      output.WriteRawTag(144, 1);
      output.WriteBool(IsReconnection);
    }
    if (UserId != 0L) {
      output.WriteRawTag(152, 1);
      output.WriteInt64(UserId);
    }
    if (CellId != 0) {
      output.WriteRawTag(160, 1);
      output.WriteInt32(CellId);
    }
    if (IsNewUser != false) {
      output.WriteRawTag(168, 1);
      output.WriteBool(IsNewUser);
    }
    if (Channel.Length != 0) {
      output.WriteRawTag(178, 1);
      output.WriteString(Channel);
    }
    if (OsVersion.Length != 0) {
      output.WriteRawTag(186, 1);
      output.WriteString(OsVersion);
    }
    if (OppVersion.Length != 0) {
      output.WriteRawTag(194, 1);
      output.WriteString(OppVersion);
    }
    if (DistinctId.Length != 0) {
      output.WriteRawTag(202, 1);
      output.WriteString(DistinctId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionID != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SessionID);
    }
    if (GateId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GateId);
    }
    if (Ip.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
    }
    if (IsNeedOverload != false) {
      size += 1 + 1;
    }
    if (UserId != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(UserId);
    }
    if (CellId != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(CellId);
    }
    if (IsNewUser != false) {
      size += 2 + 1;
    }
    if (Account.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
    }
    if (Password.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
    }
    if (LoginType != global::LoginType.Account) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LoginType);
    }
    if (Version.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
    }
    if (IsMandatory != false) {
      size += 1 + 1;
    }
    if (Pt != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pt);
    }
    if (Udid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Udid);
    }
    if (OsInfo.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(OsInfo);
    }
    if (DeviceType.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceType);
    }
    if (DeviceModel.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceModel);
    }
    if (RegistrationToken.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RegistrationToken);
    }
    if (SendTime != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(SendTime);
    }
    if (IsReconnection != false) {
      size += 2 + 1;
    }
    if (Channel.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Channel);
    }
    if (OsVersion.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(OsVersion);
    }
    if (OppVersion.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(OppVersion);
    }
    if (DistinctId.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(DistinctId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LoginInternalRequest other) {
    if (other == null) {
      return;
    }
    if (other.SessionID != 0L) {
      SessionID = other.SessionID;
    }
    if (other.GateId != 0) {
      GateId = other.GateId;
    }
    if (other.Ip.Length != 0) {
      Ip = other.Ip;
    }
    if (other.IsNeedOverload != false) {
      IsNeedOverload = other.IsNeedOverload;
    }
    if (other.UserId != 0L) {
      UserId = other.UserId;
    }
    if (other.CellId != 0) {
      CellId = other.CellId;
    }
    if (other.IsNewUser != false) {
      IsNewUser = other.IsNewUser;
    }
    if (other.Account.Length != 0) {
      Account = other.Account;
    }
    if (other.Password.Length != 0) {
      Password = other.Password;
    }
    if (other.LoginType != global::LoginType.Account) {
      LoginType = other.LoginType;
    }
    if (other.Version.Length != 0) {
      Version = other.Version;
    }
    if (other.IsMandatory != false) {
      IsMandatory = other.IsMandatory;
    }
    if (other.Pt != 0) {
      Pt = other.Pt;
    }
    if (other.Udid.Length != 0) {
      Udid = other.Udid;
    }
    if (other.OsInfo.Length != 0) {
      OsInfo = other.OsInfo;
    }
    if (other.DeviceType.Length != 0) {
      DeviceType = other.DeviceType;
    }
    if (other.DeviceModel.Length != 0) {
      DeviceModel = other.DeviceModel;
    }
    if (other.RegistrationToken.Length != 0) {
      RegistrationToken = other.RegistrationToken;
    }
    if (other.SendTime != 0L) {
      SendTime = other.SendTime;
    }
    if (other.IsReconnection != false) {
      IsReconnection = other.IsReconnection;
    }
    if (other.Channel.Length != 0) {
      Channel = other.Channel;
    }
    if (other.OsVersion.Length != 0) {
      OsVersion = other.OsVersion;
    }
    if (other.OppVersion.Length != 0) {
      OppVersion = other.OppVersion;
    }
    if (other.DistinctId.Length != 0) {
      DistinctId = other.DistinctId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SessionID = input.ReadInt64();
          break;
        }
        case 16: {
          GateId = input.ReadInt32();
          break;
        }
        case 26: {
          Ip = input.ReadString();
          break;
        }
        case 32: {
          IsNeedOverload = input.ReadBool();
          break;
        }
        case 42: {
          Account = input.ReadString();
          break;
        }
        case 50: {
          Password = input.ReadString();
          break;
        }
        case 56: {
          LoginType = (global::LoginType) input.ReadEnum();
          break;
        }
        case 66: {
          Version = input.ReadString();
          break;
        }
        case 72: {
          IsMandatory = input.ReadBool();
          break;
        }
        case 80: {
          Pt = input.ReadInt32();
          break;
        }
        case 90: {
          Udid = input.ReadString();
          break;
        }
        case 98: {
          OsInfo = input.ReadString();
          break;
        }
        case 106: {
          DeviceType = input.ReadString();
          break;
        }
        case 114: {
          DeviceModel = input.ReadString();
          break;
        }
        case 122: {
          RegistrationToken = input.ReadString();
          break;
        }
        case 136: {
          SendTime = input.ReadInt64();
          break;
        }
        case 144: {
          IsReconnection = input.ReadBool();
          break;
        }
        case 152: {
          UserId = input.ReadInt64();
          break;
        }
        case 160: {
          CellId = input.ReadInt32();
          break;
        }
        case 168: {
          IsNewUser = input.ReadBool();
          break;
        }
        case 178: {
          Channel = input.ReadString();
          break;
        }
        case 186: {
          OsVersion = input.ReadString();
          break;
        }
        case 194: {
          OppVersion = input.ReadString();
          break;
        }
        case 202: {
          DistinctId = input.ReadString();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
